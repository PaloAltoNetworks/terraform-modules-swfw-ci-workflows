name: TF Code Release CI

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      do_apply:
        description: When set to true runs also apply
        type: boolean
        default: false
      do_terratest:
        description: When set to true runs also Terratest
        type: boolean
        default: false
      idempotence:
        description: When set to true runs plan to on already applied configuration
        type: boolean
        default: true
      max_parallel:
        description: Maximum parallel jobs in matrix strategy
        type: number
        default: 10
      tf_version:
        description: A space delimited list of TF versions used to run the code with
        type: string
        default: latest
      cloud:
        description: "Decide against which public cloud the code will be run. Possible values: azure, aws, gcp"
        type: string
        required: true

jobs:
  release-prereqs:
    name: Verify if a release is required
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    outputs:
      rc: ${{ steps.rc.outputs.new_release_published }}
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: dry-run sem versioning
        id: rc
        uses: cycjimmy/semantic-release-action@v3
        with:
          dry_run: true
          semantic_version: 19.0
          extra_plugins: |
            conventional-changelog-conventionalcommits@^5.0.0
            @semantic-release/git@^10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: sem ver outputs
        run: |
          echo new_release_published - ${{ steps.rc.outputs.new_release_published }}
          echo new_release_version - ${{ steps.rc.outputs.new_release_version }}
          echo last_release_version - ${{ steps.rc.outputs.last_release_version }}


  pre_commit:
    name: Pre-Commit
    uses: ./.github/workflows/_pre_commit.yml
    needs: [release-prereqs]
    if: needs.release-prereqs.outputs.rc  == 'true'
    with:
      pre-commit-hooks: terraform_fmt terraform_docs terraform_tflint checkov
      pre-commit-files: all-files

  tf_prereqs:
    name: validate prerequisites
    needs: [release-prereqs]
    if: needs.release-prereqs.outputs.rc  == 'true'
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.paths.outputs.modules }}
      examples: ${{ steps.paths.outputs.examples }}
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: set outputs
        id: paths
        shell: bash
        run: |
          echo "modules=$(echo $(ls -d1 examples/* modules/*) | tr ' ' ',')" >> $GITHUB_OUTPUT
          echo "examples=$(echo $(ls -d1 examples/*) | tr ' ' ',')" >> $GITHUB_OUTPUT

  validate:
    name: validate terraform code
    needs: [tf_prereqs]
    if: ${{ needs.tf_prereqs.outputs.modules != '' }}
    uses: ./.github/workflows/_tf_validate.yml
    with:
      tf_version: ${{ inputs.tf_version }}
      paths: ${{ needs.tf_prereqs.outputs.modules }}
      max_parallel: ${{ inputs.max_parallel }}


  terratest:
    name: run Terratest for changed tests, modules and dependencies
    needs:
      - validate
      - tf_prereqs
    if: ${{ needs.tf_prereqs.outputs.terratest_paths != '' }}
    uses: ./.github/workflows/_terratest.yml
    permissions:
      contents: read
      id-token: write
    with:
      cloud: ${{ inputs.cloud }}
      tf_version: ${{ inputs.tf_version }}
      paths: ${{ needs.tf_prereqs.outputs.plan_paths }}
      do_terratest: ${{ inputs.do_terratest }}
      idempotence: ${{ inputs.idempotence }}
      max_parallel: ${{ inputs.max_parallel }}
    secrets: inherit


  plan_apply:
    name: run plan and/or apply on examples
    needs:
      - validate
      - tf_prereqs
      - terratest
    if: ${{ needs.tf_prereqs.outputs.examples != '' }}
    uses: ./.github/workflows/_tf_plan_apply.yml
    permissions:
      contents: read
      id-token: write
    with:
      cloud: ${{ inputs.cloud }}
      tf_version: ${{ inputs.tf_version }}
      paths: ${{ needs.tf_prereqs.outputs.examples }}
      do_apply: ${{ inputs.do_apply }}
      idempotence: ${{ inputs.idempotence }}
      max_parallel: ${{ inputs.max_parallel }}
    secrets: inherit


  release:
    name: release sem version
    needs:
      - validate
      - pre_commit
      - plan_apply
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Create release and publish
        uses: cycjimmy/semantic-release-action@v3
        with:
          semantic_version: 19.0
          extra_plugins: |
            conventional-changelog-conventionalcommits@^5.0.0
            @semantic-release/git@^10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
