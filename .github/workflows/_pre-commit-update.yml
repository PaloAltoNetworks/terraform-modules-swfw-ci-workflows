name: Pre-Commit update

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      update_branch:
        description: Name of a branch that will be used to introduce changes
        type: string
        default: pre-commit-dependencies-update
    outputs:
      pr_number:
        description: A PR number if one is created or updated
        value: ${{ jobs.update.outputs.pr_number }}
      pr_operation:
        description: 'An operation taken on a PR, either: created, updated, closed, or null string in case no operation was made'
        value: ${{ jobs.update.outputs.pr_operation }}

jobs:
  update:
    name: "Update Pre-Commit dependencies"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      pr_number: ${{ steps.pr.outputs.pull-request-number }}
      pr_operation: ${{ steps.pr.outputs.pull-request-operation }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: install Python requirements
        shell: bash
        run: python -m pip install pyyaml==6.0 requests==2.31

      - name: run the update script
        id: update
        shell: python
        run: | 
          import os
          import yaml
          import requests
          from urllib.parse import urlparse
          

          pre_commit_config_path = "./.pre-commit-config.yaml"

          with open(pre_commit_config_path, "r") as pre_commit:
              try:
                  pre_commit_config = yaml.safe_load(pre_commit)
              except yaml.YAMLError as exc:
                  print(exc)
                  exit(1)
          
          updates = dict()

          for repo in pre_commit_config['repos']:
              repo_url = repo['repo'].replace('.git','') if '.git' in repo['repo'] else repo['repo']
              release = repo['rev']
              headers = {'Accept': 'application/json'}
              resp = requests.get(f"{repo_url}/refs?type=tag", headers=headers)
              if resp.status_code == requests.codes.ok:
                  latest_release = resp.json()['refs'][0]
                  if release != latest_release:
                      print(f'{repo_url} needs to be updated to {latest_release}, currently at {release}')
                      repo['rev'] = latest_release
                      updates[urlparse(repo_url).path[1:]] = {'current': release, 'latest': latest_release}
              
          with open(pre_commit_config_path, 'w') as pre_commit:
              yaml.dump(pre_commit_config, pre_commit, default_flow_style=False)

          if updates:
            print(updates)
            updated_repos = ' '.join([ f"<li>{k}: {v['current']} -> {v['latest']}</li>" for k,v in updates.items()])
            with open(os.environ["GITHUB_OUTPUT"], "a") as output:
              output.write(f"updated_repos={updated_repos}")

      - name: create pull request
        id: pr
        uses: peter-evans/create-pull-request@v5
        with:
          add-paths: .pre-commit-config.yaml
          branch: ${{ inputs.update_branch }}
          commit-message: "[chore] pre-commit-dependencies-update"
          title: "[chore] Pre-Commit dependencies update"
          delete-branch: true
          body: |
            # Pre-Commit Dependencies updates required

            There are pre-commit dependencies waiting to be updated:

            <ul>
            ${{ steps.update.outputs.updated_repos }}
            </ul>

            Please check results of `pre-commit` test run with these updates in comments below.

            <sup>*Generated automatically with GitHub Actions*</sup>
