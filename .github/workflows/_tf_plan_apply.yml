name: (sub) TF plan/apply

permissions:
  contents: read

defaults:
  run:
    shell: bash
    
on:
  workflow_call:
    inputs:
      tf_version:
        description: Version of TF we validate with, a space delimited list.
        type: string
        required: true
      paths:
        description: Path to module that will be tested, a space delimited list of relative paths
        type: string
        required: true
      do_apply:
        description: When set to true runs also apply
        type: boolean
        default: false
      indepotency:
        description: When set to true runs plan to on already applied configuration
        type: boolean
        default: true
      max_parallel:
        description: Maximum parallel jobs in matrix strategy
        type: number
        default: 10
      cloud:
        description: "Decide against which public cloud the code will be run. Possible values: azure, aws, gcp"
        type: string
        required: true

jobs:
  prerequisites:
    name: prep data for matrix strategy
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.preqs.outputs.paths }}
      tf_versions: ${{ steps.preqs.outputs.tf_versions }}
    steps:
      - name: set outputs
        id: preqs
        run: |
          echo "paths=$(echo -n "${{ inputs.paths }}" | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "tf_versions=$(echo "${{ inputs.tf_version }} " | jq -R -s -c 'split(" ")[:-1]')" >> $GITHUB_OUTPUT
        
  terraform:
    needs: [prerequisites]
    name: '${{ matrix.path }}@${{ matrix.tf_version }}'
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      max-parallel: ${{ inputs.max_parallel }}
      matrix:
        tf_version: ${{ fromJson(needs.prerequisites.outputs.tf_versions) }}
        path: ${{ fromJson(needs.prerequisites.outputs.paths) }}
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: run plan/apply on Azure
        if: inputs.cloud == 'azure'
        uses: ./.github/actions/plan_apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        with:
          tf_version: ${{ matrix.tf_version }}
          path: ${{ matrix.path }}
          do_apply: true

      - name: run plan/apply on AWS
        if: inputs.cloud == 'aws'
        run: echo AWS placeholder

      - name: run plan/apply on GCP
        if: inputs.cloud == 'gcp'
        run: echo GCP placeholder
