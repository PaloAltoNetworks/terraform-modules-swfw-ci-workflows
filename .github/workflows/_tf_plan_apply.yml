name: (sub) TF plan/apply

permissions:
  contents: read

defaults:
  run:
    shell: bash
    
on:
  workflow_call:
    inputs:
      tf_version:
        description: Version of TF we validate with, a space delimited list.
        type: string
        required: true
      paths:
        description: Path to module that will be tested, a space delimited list of relative paths
        type: string
        required: true
      do_apply:
        description: When set to true runs also apply
        type: boolean
        default: false
      indepotency:
        description: When set to true runs plan to on already applied configuration
        type: boolean
        default: true
      max_parallel:
        description: Maximum parallel jobs in matrix strategy
        type: number
        default: 10
    secrets:
      client_id:
        required: true
      subscirption:
        required: true
      tenant:
        required: true

jobs:
  prerequisites:
    name: prep data for matrix strategy
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.preqs.outputs.paths }}
      tf_versions: ${{ steps.preqs.outputs.tf_versions }}
    steps:
      - name: set outputs
        id: preqs
        run: |
          echo "::set-output name=paths::$(echo -n "${{ inputs.paths }}" | jq -R -s -c 'split(",")')"
          echo "::set-output name=tf_versions::$(echo "${{ inputs.tf_version }} " | jq -R -s -c 'split(" ")[:-1]')"
        
  terraform:
    needs: [prerequisites]
    name: '${{ matrix.path }}@${{ matrix.tf_version }}'
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      max-parallel: ${{ inputs.max_parallel }}
      matrix:
        tf_version: ${{ fromJson(needs.prerequisites.outputs.tf_versions) }}
        path: ${{ fromJson(needs.prerequisites.outputs.paths) }}
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.tf_version }}

      - name: set UUID value
        id: uuid
        run: echo "::set-output name=uuid::$(uuidgen | tr '[:upper:]' '[:lower:]')"

      - name: login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.client_id }}
          tenant-id: ${{ secrets.tenant }}
          subscription-id: ${{ secrets.subscirption }}

      - name: run plan for ${{ matrix.path }}
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.client_id }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.subscirption }}
          ARM_TENANT_ID: ${{ secrets.tenant }}
          ARM_USE_OIDC: true
          UUID: ${{ steps.uuid.outputs.uuid }}
        run: |
          cd "$GITHUB_WORKSPACE"/${{ matrix.path }}
          make plan_file

      - name: run apply for ${{ matrix.path }}
        if: inputs.do_apply
        env:
          ARM_CLIENT_ID: ${{ secrets.client_id }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.subscirption }}
          ARM_TENANT_ID: ${{ secrets.tenant }}
          ARM_USE_OIDC: true
          UUID: ${{ steps.uuid.outputs.uuid }}
        run: |
          cd "$GITHUB_WORKSPACE"/${{ matrix.path }}
          make apply_file

      - name: test indepotency for ${{ matrix.path }}
        if: inputs.do_apply && inputs.indepotency
        env:
          ARM_CLIENT_ID: ${{ secrets.client_id }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.subscirption }}
          ARM_TENANT_ID: ${{ secrets.tenant }}
          ARM_USE_OIDC: true
          UUID: ${{ steps.uuid.outputs.uuid }}
        run: |
          cd "$GITHUB_WORKSPACE"/${{ matrix.path }}
          make indepotency

      - name: run destroy on ${{ matrix.path }}
        if: inputs.do_apply && always()
        env:
          ARM_CLIENT_ID: ${{ secrets.client_id }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.subscirption }}
          ARM_TENANT_ID: ${{ secrets.tenant }}
          ARM_USE_OIDC: true
          UUID: ${{ steps.uuid.outputs.uuid }}
        run: |
          cd "$GITHUB_WORKSPACE"/${{ matrix.path }}
          make destroy
