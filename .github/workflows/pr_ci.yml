name: (sub) PR CI

permissions:
  contents: read
  id-token: write


on:
  workflow_call:
    inputs:
      do_apply:
        description: When set to true runs also apply
        type: boolean
        default: false
      idempotence:
        description: When set to true runs plan to on already applied configuration
        type: boolean
        default: true
      max_parallel:
        description: Maximum parallel jobs in matrix strategy
        type: number
        default: 10
      tf_version:
        description: A space delimited list of TF versions used to run the code with
        type: string
        default: latest
      cloud:
        description: "Decide against which public cloud the code will be run. Possible values: azure, aws, gcp"
        type: string
        required: true
      pre-commit-hooks:
        description: "Pre-commit hook list. Possible values are a combination of any of the following: terraform_fmt, terraform_docs, terraform_tflint, checkov (space spearated)."
        type: string
        default: terraform_fmt terraform_docs terraform_tflint checkov

jobs:

  tf_prereqs:
    name: terraform modules discovery
    runs-on: ubuntu-latest
    outputs:
      validate_paths: ${{ steps.format.outputs.dir_diff }}
      plan_paths: ${{ steps.format.outputs.plan_paths }}
      changed_files: ${{ steps.format.outputs.files_diff }}
    steps:
      - name: checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: get diff with base branch
        id: diff
        uses: tj-actions/changed-files@v32
        with:
          separator: "@"
          files: |
            modules/**/*.tf
            examples/**/*.tf

      # - name: show raw DIFF
      #   env:
      #     DIFFS: ${{ steps.diff.outputs.all_changed_files }}
      #   shell: bash
      #   run: |
      #     echo $DIFFS

      - name: extract paths for tasks
        id: format
        env:
          DIFFS: ${{ steps.diff.outputs.all_changed_files }}
        shell: bash
        run: |

          set -o pipefail
          # build an array from the DIFFS input
          DIFFS_ARRAY=(${DIFFS//@/ })

          # extract folder names from DIFFS
          DIRS=()
          for ELEMENT in ${DIFFS_ARRAY[*]}; do
            DIRS+=($(echo $ELEMENT | sed -E "s/^(modules|examples)\/(.+)\/.*$/\1\/\2/" ))
          done

          # from folders array extract only modules paths
          ## double subshell here is to hide grep returning 1 when no modules paths are present in $DIRS
          IFS=$'\n' DIFF_MODULES_ARRAY=($(echo $(grep modules <<< "${DIRS[*]}")))
          unset IFS

          # use these paths to discover dependencies - find examples using modules from the list
          EXAMPLES_DISCOVERED=()
          for ELEMENT in ${DIFF_MODULES_ARRAY[*]}; do
            EXAMPLES_DISCOVERED+=($(echo $(grep -rl "$ELEMENT" examples/*/*.tf | sed -E "s/^(examples\/.*)\/.*$/\1/g")))
          done
          
          # deduplicate list of example paths
          IFS=$'\n' EXAMPLES_DISCOVERED_DEDUPLICATED=($(sort -u <<<  "${EXAMPLES_DISCOVERED[*]}"))
          unset IFS
          
          # create a combined list of folders containin original paths + discovered dependencies
          COMBINED_FOLDERS=(${EXAMPLES_DISCOVERED_DEDUPLICATED[*]} ${DIRS[*]})
          # deduplicate examples from the list
          IFS=$'\n' COMBINED_FOLDERS_DEDUPLICATED=($(sort -u <<<  "${COMBINED_FOLDERS[*]}"))
          unset IFS
          
          # extract only examples from the deduplicated list
          IFS=$'\n' PLAN_DIRS=($(echo $(grep examples <<< "${COMBINED_FOLDERS_DEDUPLICATED[*]}")))
          unset IFS
          
          DIR_DIFF=$(echo ${DIRS[*]} | tr ' ' ',')
          PLAN_PATHS=$(echo ${PLAN_DIRS[*]} | tr ' ' ',')
          
          # a list of chagned paths, used for validation tasks
          echo "dir_diff=$DIR_DIFF" >> $GITHUB_OUTPUT
          # a list of changed files, used for pre-commit tasks
          echo "files_diff=${DIFFS_ARRAY[*]}" >> $GITHUB_OUTPUT
          # a list of affected and changed examples, used for plan/apply tasks
          echo "plan_paths=$PLAN_PATHS" >> $GITHUB_OUTPUT

  pre_commit:
    name: Pre-Commit
    needs: [tf_prereqs]
    if: ${{ needs.tf_prereqs.outputs.changed_files != '' }}
    uses: ./.github/workflows/_pre_commit.yml
    with:
      pre-commit-hooks: ${{ inputs.pre-commit-hooks }}
      pre-commit-files: ${{ needs.tf_prereqs.outputs.changed_files }}


  validate:
    name: validate all changed modules
    needs: [tf_prereqs]
    if: ${{ needs.tf_prereqs.outputs.validate_paths != '' }}
    uses: ./.github/workflows/_tf_validate.yml
    with:
      tf_version: ${{ inputs.tf_version }}
      paths: ${{ needs.tf_prereqs.outputs.validate_paths }}
      max_parallel: ${{ inputs.max_parallel }}


  plan_apply:
    name: run plan changed examples and dependencies
    needs: 
      - validate
      - tf_prereqs
    if: ${{ needs.tf_prereqs.outputs.plan_paths != '' }}
    uses: ./.github/workflows/_tf_plan_apply.yml
    permissions:
      contents: read
      id-token: write
    with:
      cloud: ${{ inputs.cloud }}
      tf_version: ${{ inputs.tf_version }}
      paths: ${{ needs.tf_prereqs.outputs.plan_paths }}
      do_apply: ${{ inputs.do_apply }}
      idempotence: ${{ inputs.idempotence }}
      max_parallel: ${{ inputs.max_parallel }}
    secrets: inherit


  branch_protection_junction:
    name: junction point for branch protection
    needs:
      - validate
      - pre_commit
      - plan_apply
    if: always()
    permissions:
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: check statuses of other jobs
        uses: technote-space/workflow-conclusion-action@v3

      - name: branch protection check validation point
        run: | 
          if [[ "$WORKFLOW_CONCLUSION" == "failure" ]]; then exit 1; fi
